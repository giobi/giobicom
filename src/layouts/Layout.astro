---
export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
}

const {
  title,
  description = "Giobi.com - Sviluppo Web e Applicazioni Laravel. Esperienza professionale dal 2008 con WordPress, Laravel, e-commerce. Programmatore Laravel a Milano.",
  image = "/giobicom25/images/giobi-social.svg",
  type = "website"
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="it" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/giobicom25/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Giobi.com" />
    <meta name="keywords" content="sviluppo web, Laravel, WordPress, programmatore Milano, applicazioni web, e-commerce, siti web" />
    
    <!-- Preload critical resources -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <title>{title}</title>
  </head>
  
  <body class="antialiased">
    <!-- Scroll Progress Indicator -->
    <div id="scroll-progress" class="fixed top-0 left-0 h-1 bg-gradient-to-r from-teal-blue to-golden-yellow z-50 transition-all duration-300" style="width: 0%; background: linear-gradient(90deg, var(--color-teal-blue), var(--color-golden-yellow));"></div>
    
    <div id="app" class="min-h-screen flex flex-col">
      <header id="header">
        <slot name="header" />
      </header>
      
      <main id="main" class="flex-1">
        <slot />
      </main>
      
      <footer id="footer">
        <slot name="footer" />
      </footer>
    </div>
    
    <!-- Scripts -->
    <script>
      // Smooth scrolling for anchor links
      document.addEventListener('DOMContentLoaded', () => {
        const links = document.querySelectorAll('a[href^="#"]');
        links.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const target = document.querySelector(link.getAttribute('href'));
            if (target) {
              target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          });
        });

        // Scroll progress indicator
        const scrollProgress = document.getElementById('scroll-progress');
        if (scrollProgress) {
          const updateScrollProgress = () => {
            const scrollTop = window.pageYOffset;
            const docHeight = document.body.scrollHeight - window.innerHeight;
            const scrollPercent = (scrollTop / docHeight) * 100;
            scrollProgress.style.width = scrollPercent + '%';
          };

          window.addEventListener('scroll', updateScrollProgress);
          window.addEventListener('resize', updateScrollProgress);
        }

        // Intersection Observer for fade-in animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-fade-in');
            }
          });
        }, observerOptions);

        // Observe all fade-in-up elements
        document.querySelectorAll('.fade-in-up').forEach(el => {
          observer.observe(el);
        });

        // Performance optimization: Reduce motion for better performance on mobile
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
        if (prefersReducedMotion.matches) {
          document.documentElement.style.setProperty('--animation-duration', '0s');
        }
      });
    </script>
  </body>
</html>